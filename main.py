import logging
import os
import random
import json
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')  # Telegram Bot Token
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')  # OpenRouter API Key

if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if not OPENROUTER_API_KEY:
    raise ValueError("–ö–ª—é—á API OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_quizzes = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_stats = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class QuizStates(StatesGroup):
    SUBJECT = State()
    DIFFICULTY = State()
    QUIZ = State()
    END = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI
async def generate_quiz(subject: str, difficulty: str) -> list:
    formatted_prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ {subject.capitalize()}, —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã –≤ –í–£–ó—ã."
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –∫–ª—é—á–∞–º–∏:\n\n"
        "- 'question': —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞\n"
        "- 'correct_answer': –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
        "- 'incorrect_answers': —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä—ë—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n"
        "[\n"
        "    {\n"
        "        \"question\": \"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?\",\n"
        "        \"correct_answer\": \"4\",\n"
        "        \"incorrect_answers\": [\"3\", \"5\", \"6\"]\n"
        "    },\n"
        "    {\n"
        "        \"question\": \"–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –ø—Ä—è–º–æ–º —É–≥–ª–µ?\",\n"
        "        \"correct_answer\": \"90\",\n"
        "        \"incorrect_answers\": [\"45\", \"180\", \"360\"]\n"
        "    }\n"
        "]\n\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ 5 –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON. "
        "–ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏."
    )

    try:
        completion = client.chat.completions.create(
            model="openrouter/cypher-alpha:free",
            messages=[{"role": "user", "content": formatted_prompt}]
        )
        response = completion.choices[0].message.content
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n{response}")
        return process_generated_quizzes(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        return []

# –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
def process_generated_quizzes(response: str) -> list:
    try:
        response = response.strip().strip("```json").strip("```")
        data = json.loads(response)
        quizzes = []
        for item in data:
            question = item.get("question", "").strip()
            correct_answer = item.get("correct_answer", "").strip()
            incorrect_answers = item.get("incorrect_answers", [])

            if not question or not correct_answer or len(incorrect_answers) != 3:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞: {item}")
                continue

            answers = [correct_answer] + incorrect_answers
            random.shuffle(answers)
            correct_answer_index = answers.index(correct_answer)

            quizzes.append({
                'question': question,
                'answers': answers,
                'correct_option_id': correct_answer_index
            })
        return quizzes
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        logger.error(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start_command_handler(message: Message, state: FSMContext):
    await state.set_state(QuizStates.SUBJECT)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subject_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), KeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")],
            [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"), KeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")],
            [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=subject_keyboard
    )

@dp.message(QuizStates.SUBJECT)
async def select_subject(message: Message, state: FSMContext):
    subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        stats = user_stats.get(message.from_user.id, {"correct_answers": 0, "wrong_answers": 0})
        await message.answer(
            f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}\n"
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['wrong_answers']}"
        )
        return

    if message.text not in subjects:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    subject = message.text
    await state.update_data(subject=subject)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {subject}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    quizzes = await generate_quiz(subject, "–°—Ä–µ–¥–Ω–∏–π")  # –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
    if not quizzes:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    active_quizzes[message.from_user.id] = quizzes
    await state.update_data(question_id=0)
    await state.set_state(QuizStates.QUIZ)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_question(message, quizzes[0], 0)

async def send_question(message: Message, quiz: dict, question_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏."""
    answers = quiz.get("answers", [])
    if not answers or len(answers) != 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {quiz}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    question_text = f"–í–æ–ø—Ä–æ—Å: {quiz['question']}\n\n"
    for i, answer in enumerate(answers, start=1):
        question_text += f"{i}. {answer}\n"

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
    keyboard_buttons = [
        [InlineKeyboardButton(text=str(i), callback_data=f"answer:{question_id}:{i-1}")]
        for i in range(1, 5)
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(question_text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("answer:"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    question_id = int(callback.data.split(":")[1])
    selected_answer = int(callback.data.split(":")[2])
    quizzes = active_quizzes.get(user_id, [])

    if not quizzes or question_id >= len(quizzes):
        await callback.message.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        await state.set_state(QuizStates.END)
        return

    quiz = quizzes[question_id]
    correct_option_id = quiz["correct_option_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats[user_id] = user_stats.get(user_id, {"correct_answers": 0, "wrong_answers": 0})
    if selected_answer == correct_option_id:
        user_stats[user_id]["correct_answers"] += 1
        await callback.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        user_stats[user_id]["wrong_answers"] += 1
        await callback.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz['answers'][correct_option_id]}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    question_id += 1
    if question_id < len(quizzes):
        await state.update_data(question_id=question_id)
        await send_question(callback.message, quizzes[question_id], question_id)
    else:
        await callback.message.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        await state.set_state(QuizStates.END)

@dp.message(QuizStates.END)
async def end_quiz(message: Message, state: FSMContext):
    stats = user_stats.get(message.from_user.id, {"correct_answers": 0, "wrong_answers": 0})
    await message.answer(
        f"–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}\n"
        f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['wrong_answers']}\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), KeyboardButton(text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")],
                [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"), KeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")],
                [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")]
            ],
            resize_keyboard=True
        )
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())